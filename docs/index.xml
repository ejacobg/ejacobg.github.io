<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ean Jacob Gayban</title>
    <link>https://ejacobg.com/</link>
    <description>Recent content on Ean Jacob Gayban</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Dec 2022 14:23:57 -0800</lastBuildDate><atom:link href="https://ejacobg.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Links &#39;R&#39; Us</title>
      <link>https://ejacobg.com/projects/links-r-us/</link>
      <pubDate>Wed, 31 May 2023 16:15:05 -0700</pubDate>
      
      <guid>https://ejacobg.com/projects/links-r-us/</guid>
      <description>This project was made to accompany my reading of Hands-On Software Engineering with Golang. Please note that the vast majority of this code was not written by me, however I did make a couple of meaningful changes: (1) I reorganized all the packages into a form I liked better (similar to the Standard Package Layout), (2) I rewrote a few of the tests (add links) to use the standard testing package rather than GoCheck, and (3) I got rid of a lot of old/deprecated code since the project isn&amp;rsquo;t exactly up-to-date.</description>
    </item>
    
    <item>
      <title>Testing Services</title>
      <link>https://ejacobg.com/notes/testing-services/</link>
      <pubDate>Thu, 11 May 2023 22:19:39 -0700</pubDate>
      
      <guid>https://ejacobg.com/notes/testing-services/</guid>
      <description>Let&amp;rsquo;s say that some parts of your code want to make use of a key-value store that looks something like this:
package kv // Store stores positive integers. type Store interface { Get(key int) int // Returns -1 if the key is not present. Put(key, value int) // Inserts a new item, updating it if present. Delete(key int) // No-op if key is not present. } You might then have some concrete implementations for your store:</description>
    </item>
    
    <item>
      <title>Hands-On Software Engineering With Golang</title>
      <link>https://ejacobg.com/notes/hands-on-software-engineering-with-golang/</link>
      <pubDate>Tue, 09 May 2023 10:49:23 -0700</pubDate>
      
      <guid>https://ejacobg.com/notes/hands-on-software-engineering-with-golang/</guid>
      <description>Some notes and my overall experience reading through Achilleas Anagnostopoulos&amp;rsquo;s Hands-On Software Engineering with Golang (2020). This won&amp;rsquo;t cover everything discussed in the book, just the points I thought were most helpful.
ReviewI went into this book thinking I could hit a lot of the keywords on my list: Docker, Kubernetes, gRPC, concurrency, software engineering, testing, and a project to add to my portfolio. In the loosest sense you could say I &amp;ldquo;hit&amp;rdquo; all of these topics, but some were more focused on than others.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ejacobg.com/about/</link>
      <pubDate>Sat, 29 Apr 2023 15:53:59 -0800</pubDate>
      
      <guid>https://ejacobg.com/about/</guid>
      <description>MeMy name is Ean Jacob Gayban, but I go by Jacob. I&amp;rsquo;m a graduate from the University of Nevada, Reno, currently living in the Las Vegas area. I am currently seeking employment, particularly for a junior web or backend development position. I&amp;rsquo;ve been writing a lot of Go lately, but I&amp;rsquo;ve worked with several other languages during my time in college, including JavaScript, C++, C#, Elixir, and Python. I&amp;rsquo;m open to learning new languages and technologies, and plan to continue learning more to expand my repertoire.</description>
    </item>
    
    <item>
      <title>Simple &amp; Sinister</title>
      <link>https://ejacobg.com/blog/simple-and-sinister/</link>
      <pubDate>Fri, 28 Apr 2023 23:09:27 -0700</pubDate>
      
      <guid>https://ejacobg.com/blog/simple-and-sinister/</guid>
      <description>I&amp;rsquo;ve been following the Kettlebell Simple &amp;amp; Sinister program for a while now (144 days as of 4/28/2023), and I&amp;rsquo;d like to note down some tips that seemed to help during this time.
Practice your form. I spent my first two weeks simply practicing all the drills outlined in the first part of the book. Record your movements and fix any deficiencies. Experiment with your footwork and find what feels comfortable.</description>
    </item>
    
    <item>
      <title>Tourney Tracker</title>
      <link>https://ejacobg.com/projects/tourney-tracker/</link>
      <pubDate>Sat, 22 Apr 2023 23:14:00 -0700</pubDate>
      
      <guid>https://ejacobg.com/projects/tourney-tracker/</guid>
      <description>This project was made to practice/review some concepts discussed in Alex Edwards&amp;rsquo;s Let&amp;rsquo;s Go and Let&amp;rsquo;s Go Further books. I also wanted to get a feel for how I wanted to structure my (web) applications in the future. Below is some discussion on the various sources that helped influence how this project came to be structured.
Let&amp;rsquo;s Go/SnippetboxI repurposed a lot of the template-handling code from the Snippetbox project into the Tourney Tracker.</description>
    </item>
    
    <item>
      <title>Hacker News Saved</title>
      <link>https://ejacobg.com/projects/hn/</link>
      <pubDate>Fri, 24 Mar 2023 18:37:59 -0700</pubDate>
      
      <guid>https://ejacobg.com/projects/hn/</guid>
      <description>I&amp;rsquo;ve been spending a lot of time on Hacker News lately, and like many other people I&amp;rsquo;ve taken to building a large backlog of links to several blog posts, articles, and discussions. It feels like a waste for me to clutter my bookmarks with links I end up not reading, especially when many of these links are interesting, insightful, or happen to be relevant to whatever I&amp;rsquo;m working on at the moment.</description>
    </item>
    
    <item>
      <title>Yearly Theme 2023</title>
      <link>https://ejacobg.com/blog/yearly-theme-2023/</link>
      <pubDate>Sun, 01 Jan 2023 22:19:42 -0800</pubDate>
      
      <guid>https://ejacobg.com/blog/yearly-theme-2023/</guid>
      <description>Year of (A)VocationI&amp;rsquo;ve been listening to a lot of Cortex lately and I managed to catch up with the latest episode right around theme season, so I thought I&amp;rsquo;d give the yearly themes a try.
DescriptionThis year I will be graduating from college and entering the workforce. A lot of time will be opening up for me, and I want to use it to develop both my personal and professional interests, both of which I feel haven&amp;rsquo;t been given their proper attention.</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://ejacobg.com/tests/syntax/</link>
      <pubDate>Thu, 15 Dec 2022 12:58:26 -0800</pubDate>
      
      <guid>https://ejacobg.com/tests/syntax/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) type Moo struct { Cow int Sound string Tube chan bool } // A cow will moo until it is being fed func cow(num int, mootube chan Moo) { tube := make(chan bool) for { select { case mootube &amp;lt;- Moo{num, &amp;#34;moo&amp;#34;, tube}: fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;mooed through the mootube&amp;#34;) &amp;lt;-tube fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;is being fed and stops mooing&amp;#34;) mootube &amp;lt;- Moo{num, &amp;#34;mooh&amp;#34;, nil} fmt.</description>
    </item>
    
    <item>
      <title>Drop-in Minimal CSS</title>
      <link>https://ejacobg.com/tests/dropin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ejacobg.com/tests/dropin/</guid>
      <description>This page provides an overview of barebones drop-in minimal CSS boilerplate frameworks. To switch to adifferent stylesheet, select one of the frameworks from the dropdown menu below. For more information, andlinks to all the frameworks seen here, visit the project page on GitHub.
New: Click or drag thisbookmarklet to your bookmark bar to add a CSS switcher to any site!
Text: Headings · Paragraphs· Blockquotes · Lists · Horizontalrules · Tabular data · Code · Inline elementsEmbedded content: Images · Audio · Video · Canvas · Meter · Progress · Inline SVG · IFramesForm elements: Input fields · Selectmenus · Checkboxes · Radio buttons · Textareas · HTML5 inputs · Action buttonsTextHeadingsHeading 1Heading 2Heading 3Heading 4Heading 5Heading 6[Top]</description>
    </item>
    
  </channel>
</rss>
